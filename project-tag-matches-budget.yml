AWSTemplateFormatVersion: '2010-09-09'
Description: >
  'AWS Config Rule to make sure all Resources 
  have a Project tag and that its value equals an approved AWS Budget Name.'
Parameters:
  ProjectName:
    Type: String
    Description: >
      The Project name is used to create a Project tag for all Resources
      created from this template that can accept tags.
  OrganizationsParentAccountNumber:
    Type: String
    Description: >
      Optional.  This is the AWS account number of the parent billing account if you're using
      AWS Organizations and have put your AWS Budgets into your Organizations parent billing account.
      If you are keeping your AWS Budgets in the same account as your AWS Config Rule, you
      should leave this blank.  If you do provide a value here, you must also specify a value for
      AWSOrganizationsAccountCrossAccountRoleArn.
  OrganizationsAccountCrossAccountRoleArn:
    Type: String
    Description: >
      Optional.  You must define this if setting OrganizationsParentAccountNumber.
      AWS Organizations Master Account's Cross-Account IAM Role Arn that allows our AWS Config Rule's
      Lambda function to check our AWS Budget names from the parent account.  Because this IAM
      Role is deployed to a different account, it is defined and deployed in a separate 
      CloudFormation template contained within this project called cross-account-budgets-read-access-role.yml
Conditions:
  # Evaluates to true if a non-null value is provided for OrganizationsParentAccountNumber
  OrganizationsAccountIdProvided: !Not [!Equals ['', !Ref OrganizationsParentAccountNumber]]
  # Evaluates to true if a non-null value is provided for OrganizationsAccountCrossAccountRoleArn
  OrganizationsAccountCrossAccountRoleProvided: !Not [!Equals ['', !Ref OrganizationsAccountCrossAccountRoleArn]]
Resources:
  ConfigPermissionToCallLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt LambdaCheckProjectTag.Arn
      Action: "lambda:InvokeFunction"
      Principal: "config.amazonaws.com"
  LambdaCheckProjectTag: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: aws-config-project-tag-matches-budget
      Description: >
        Lambda function associated with AWS Config Rule that checks that a 
        Project tag exists and that its value matches the Name of an AWS Budget.
      Tags:
        - Key: Project
          Value: !Ref ProjectName
      Code: 
        ZipFile: 
          !Sub |
            import json
            import boto3

            def evaluate_compliance(configuration_item):
              if configuration_item["configurationItemStatus"] == "ResourceDeleted":
                return {
                  "compliance_type": "NOT_APPLICABLE",
                  "annotation": "The configurationItem was deleted and therefore cannot be validated."
                }
              tags = configuration_item['tags']
              resource_type = configuration_item['resourceType']
              resource_id = configuration_item['resourceId']
              resource_name = configuration_item['resourceName']
              print('RESOURCE_TYPE')
              print(resource_type)
              print('RESOURCE_NAME')
              print(resource_name)
              print('TAGS')
              print(tags)
              # get AWS Budget Names
              if(${OrganizationsParentAccountNumber}):
                sts_client = boto3.client('sts')
                budgets_account = sts_client.assume_role(
                  RoleArn="${OrganizationsAccountCrossAccountRoleArn}",
                  RoleSessionName="cross_account_lambda"
                )
                ACCESS_KEY = budgets_account['Credentials']['AccessKeyId']
                SECRET_KEY = budgets_account['Credentials']['SecretAccessKey']
                SESSION_TOKEN = budgets_account['Credentials']['SessionToken']
                budgets_client = boto3.client(
                  'budgets',
                  aws_access_key_id=ACCESS_KEY,
                  aws_secret_access_key=SECRET_KEY,
                  aws_session_token=SESSION_TOKEN,
                )
                budgets_response = budgets_client.describe_budgets(AccountId='${OrganizationsParentAccountNumber}')
              else:
                budgets_client = boto3.client('budgets')
                budgets_reponse = budgets_client.describe_budgets(AccountId='${AWS::AccountId}')

              budgets = budgets_reponse['Budgets']
              budget_names = []
              for budget in budgets:
                budget_names.append(budget['BudgetName'])
              
              if 'Project' not in tags:
                return {
                  "compliance_type": "NON_COMPLIANT",
                  "annotation": "Missing Project tag."
                }
              else:
                if tags['Project'] not in budget_names:
                  return {
                    "compliance_type": "NON_COMPLIANT",
                    "annotation": "Project tag value does not match the Name of an AWS Budget."
                  }
                else:
                  return {
                    "compliance_type": "COMPLIANT",
                    "annotation": "Project tag value matches the Name of an AWS Budget."
                  }

            def lambda_handler(event, context):
              invoking_event = json.loads(event['invokingEvent'])
              configuration_item = invoking_event["configurationItem"]
              print(configuration_item)
              evaluation = evaluate_compliance(configuration_item)
              config = boto3.client('config')
              response = config.put_evaluations(
                Evaluations=[
                  {
                    'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                    'ComplianceResourceId': invoking_event['configurationItem']['resourceId'],
                    'ComplianceType': evaluation["compliance_type"],
                    "Annotation": evaluation["annotation"],
                    'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
                  }
                ],
                ResultToken=event['resultToken']
              )
      Handler: "index.lambda_handler"
      Runtime: python3.7
      Timeout: 30
      Role: 
        Fn::GetAtt: 
          - LambdaExecutionRole
          - Arn
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aws-config-project-tag-matches-budget
      Tags:
        - Key: Project
          Value: !Ref ProjectName
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
      Policies:
      - PolicyName: 'config'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'config:PutEvaluations'
            Resource: '*'
      - PolicyName: 'budgets'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'budgets:ViewBudget'
            Resource: '*'
      - PolicyName: 'logs'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'logs:CreateLogGroup'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
          - Effect: 'Allow'
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
      - !If
        - OrganizationsAccountCrossAccountRoleProvided
        - PolicyName: 'assume-view-budgets-role-from-parent-account'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Action:
              - 'sts:AssumeRole'
              Resource: !Ref OrganizationsAccountCrossAccountRoleArn
        - Ref: 'AWS::NoValue'
  ConfigRuleCheckProjectTag: 
    Type: AWS::Config::ConfigRule
    Properties: 
      ConfigRuleName: project-tag-matches-budget
      Scope: 
        ComplianceResourceTypes: 
          - "AWS::ACM::Certificate"
          - "AWS::ApiGateway::RestApi"
          - "AWS::ApiGateway::Stage"
          - "AWS::ApiGatewayV2::RestApi"
          - "AWS::ApiGatewayV2::Stage"
          - "AWS::AutoScaling::AutoScalingGroup"
          - "AWS::AutoScaling::LaunchConfiguration"
          - "AWS::CloudFormation::Stack"
          - "AWS::CloudFront::Distribution"
          - "AWS::CloudFront::StreamingDistribution"
          - "AWS::CloudTrail::Trail"
          - "AWS::CodeBuild::Project"
          - "AWS::CodePipeline::Pipeline"
          - "AWS::DynamoDB::Table"
          - "AWS::EC2::CustomerGateway"
          - "AWS::EC2::Instance"
          - "AWS::EC2::InternetGateway"
          - "AWS::EC2::NetworkAcl"
          - "AWS::EC2::NetworkInterface"
          - "AWS::EC2::RouteTable"
          - "AWS::EC2::SecurityGroup"
          - "AWS::EC2::Subnet"
          - "AWS::EC2::Volume"
          - "AWS::EC2::VPC"
          - "AWS::EC2::VPNConnection"
          - "AWS::EC2::VPNGateway"
          - "AWS::ElasticBeanstalk::Environment"
          - "AWS::ElasticLoadBalancing::LoadBalancer"
          - "AWS::ElasticLoadBalancingV2::LoadBalancer"
          - "AWS::IAM::Role"
          - "AWS::Lambda::Function"
          - "AWS::RDS::DBInstance"
          - "AWS::RDS::DBSecurityGroup"
          - "AWS::RDS::DBSnapshot"
          - "AWS::RDS::DBSubnetGroup"
          - "AWS::RDS::EventSubscription"
          - "AWS::Redshift::Cluster"
          - "AWS::Redshift::ClusterParameterGroup"
          - "AWS::Redshift::ClusterSecurityGroup"
          - "AWS::Redshift::ClusterSnapshot"
          - "AWS::Redshift::ClusterSubnetGroup"
          - "AWS::S3::Bucket"
      Source: 
        Owner: "CUSTOM_LAMBDA"
        SourceDetails: 
          - EventSource: "aws.config"
            MessageType: ConfigurationItemChangeNotification
        SourceIdentifier: !GetAtt LambdaCheckProjectTag.Arn
    DependsOn: ConfigPermissionToCallLambda